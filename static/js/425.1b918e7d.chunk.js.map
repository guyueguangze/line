{"version":3,"file":"static/js/425.1b918e7d.chunk.js","mappings":"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","sources":["page/Composer/gates/Cz.jsx","page/Composer/gates/I.jsx","page/Composer/gates/Pvz.jsx","page/Composer/gates/Vz.jsx","page/Composer/gates/YGate.jsx","page/Composer/OtherGate.jsx","page/Composer/Y.jsx","page/Composer/X.jsx","page/Composer/decmp.js","page/Composer/Line.jsx","page/Composer/index.jsx"],"sourcesContent":["import React from \"react\"\r\n\r\nexport default function cz() {\r\n  return <circle cx=\"16\" cy=\"16\" r=\"4\" fill=\"rgb(126, 164, 248)\"></circle>\r\n}\r\n","import React from \"react\"\r\n\r\nexport default function I() {\r\n  return (\r\n    <g>\r\n      <rect\r\n        y=\"0\"\r\n        type=\"h\"\r\n        fill=\"rgb(216, 211, 231)\"\r\n        width=\"32\"\r\n        height=\"32\"\r\n      ></rect>\r\n      <text x=\"14.21875\" y=\"21.5\" fill=\"#ffffff\">\r\n        I\r\n      </text>\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default function Pvz() {\r\n  return (\r\n    <g>\r\n      <rect\r\n        y=\"0\"\r\n        type=\"h\"\r\n        fill=\"rgb(226, 106, 84)\"\r\n        width=\"32\"\r\n        height=\"32\"\r\n      ></rect>\r\n      <text x=\"4.21875\" y=\"21.5\" fill=\"#ffffff\">\r\n        PVZ\r\n      </text>\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default function Vz() {\r\n  return (\r\n    <g>\r\n      <rect\r\n        y=\"0\"\r\n        type=\"h\"\r\n        fill=\"rgb(96, 199, 175)\"\r\n        width=\"32\"\r\n        height=\"32\"\r\n      ></rect>\r\n      <text x=\"8.21875\" y=\"21.5\" fill=\"#ffffff\">\r\n        VZ\r\n      </text>\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default function YGate() {\r\n  return (\r\n    <g>\r\n      <rect\r\n        y=\"0\"\r\n        type=\"h\"\r\n        fill=\"rgb(80, 161, 226)\"\r\n        width=\"32\"\r\n        height=\"32\"\r\n      ></rect>\r\n      <text x=\"12.21875\" y=\"21.5\" fill=\"balck\">\r\n        Y\r\n      </text>\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default function OtherGate({ name }) {\r\n  function generateRGB(letter) {\r\n    var charCode = letter.charCodeAt(0)\r\n    var r = (charCode * 43) % 256\r\n    var g = (charCode * 67) % 256\r\n    var b = (charCode * 97) % 256\r\n\r\n    return \"rgb(\" + r + \", \" + g + \", \" + b + \")\"\r\n  }\r\n  let color = generateRGB(name)\r\n  return (\r\n    <g>\r\n      <rect y=\"0\" type=\"h\" fill={color} width=\"32\" height=\"32\"></rect>\r\n      <text\r\n        textAnchor=\"middle\"\r\n        alignmentBaseline=\"middle\"\r\n        width=\"32\"\r\n        height=\"32\"\r\n        x=\"14.21875\"\r\n        y=\"18\"\r\n        fill=\"#ffffff\"\r\n      >\r\n        {name}\r\n      </text>\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport Cz from \"./gates/Cz\"\r\nimport I from \"./gates/I\"\r\nimport Pvz from \"./gates/Pvz\"\r\nimport Vz from \"./gates/Vz\"\r\nimport YGate from \"./gates/YGate\"\r\nimport OtherGate from \"./OtherGate\"\r\nexport default function Y({ gate }) {\r\n  // console.log(gate, 55)\r\n  return (\r\n    <g>\r\n      {gate &&\r\n        gate.qubit?.map((item, index) => (\r\n          <g key={index} transform={`translate(0,${item * 40 + 24})`}>\r\n            {(() => {\r\n              switch (gate.name) {\r\n                case \"cz\":\r\n                  return <Cz />\r\n                case \"i\":\r\n                  return <I />\r\n                case \"pvz\":\r\n                  return <Pvz />\r\n                case \"vz\":\r\n                  return <Vz />\r\n                case \"y\":\r\n                  return <YGate />\r\n\r\n                default:\r\n                  return <OtherGate name={gate?.name} />\r\n              }\r\n            })()}\r\n          </g>\r\n        ))}\r\n      {gate.qubit?.length > 1 && (\r\n        <line\r\n          strokeWidth=\"2\"\r\n          stroke=\"rgb(126, 164, 248)\"\r\n          x1={16}\r\n          x2={16}\r\n          y1={gate.qubit[0] * 40 + 40}\r\n          y2={gate.qubit[1] * 40 + 40}\r\n        ></line>\r\n      )}\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport Y from \"./Y\"\r\nimport { decompose_gates } from \"./decmp\"\r\n\r\nexport default function X({ x, item, qubitLineArry }) {\r\n  // let ygate = decompose_gates(item)\r\n  // console.log(ygate, 333)\r\n  return (\r\n    <>\r\n      <g transform={`translate(${x * 45 + 95})`}>\r\n        {/* <g transform={`translate(${x * 30})`}> */}\r\n        {item?.map((gate, index) => (\r\n          <Y name={item.name} x={x} key={index} gate={gate} y={index} />\r\n        ))}\r\n        {/* <rect\r\n          fill=\"rgb(215, 215, 215)\"\r\n          width={5}\r\n          height={qubitLineArry.length * 40}\r\n          y=\"30\"\r\n          x=\"100\"\r\n        ></rect> */}\r\n        {/* <line\r\n          x1={102.5}\r\n          x2={102.5}\r\n          y1={30}\r\n          y2={qubitLineArry.length * 40}\r\n          strokeDasharray=\"4\"\r\n          stroke=\"rgb(45, 45, 45)\"\r\n        ></line> */}\r\n        {/* </g> */}\r\n      </g>\r\n    </>\r\n  )\r\n}\r\n","\r\n// let gates = [\r\n//     { name: \"cz\", qubit: [0, 1] },\r\n//     { name: \"cz\", qubit: [2, 3] },\r\n//     { name: \"i\", qubit: [4] },\r\n//     { name: \"i\", qubit: [5] },\r\n//     { name: \"cz\", qubit: [6, 7] },\r\n//     { name: \"cz\", qubit: [8, 15] },\r\n//     { name: \"cz\", qubit: [16, 17] },\r\n//     { name: \"cz\", qubit: [9, 14] },\r\n//     { name: \"cz\", qubit: [10, 11] },\r\n//     { name: \"cz\", qubit: [12, 13] },\r\n// ]\r\n\r\nfunction copy(element){\r\n    return JSON.parse(JSON.stringify(element));\r\n    \r\n}\r\n\r\nexport  function decompose_gates(gates){\r\n    let result = [];\r\n    let tmp = [];\r\n    let left = 0;\r\n    let right = 0;\r\n    let ql,qr;\r\n    while(gates.length !== 0){\r\n        left=-1;\r\n        right=-1;\r\n        let new_gates=[];\r\n        tmp=[];\r\n        for(let i=0;i<gates.length;i++){\r\n            if(gates[i]['qubit']?.length==1){\r\n                ql=gates[i]['qubit']['0'];\r\n                qr=gates[i]['qubit']['0'];\r\n            }\r\n            else{\r\n                ql=gates[i]['qubit']['0'];\r\n                qr=gates[i]['qubit']['1'];\r\n            }\r\n            \r\n            if(left==-1){\r\n                left = ql;\r\n                right = qr;\r\n                tmp.push(copy(gates[i]));\r\n            }\r\n            else{\r\n                if(qr>=left&&right>=ql){\r\n                    new_gates.push(copy(gates[i]));\r\n                }\r\n                else{\r\n                    tmp.push(copy(gates[i]));\r\n                    left = Math.min(left,ql);\r\n                    right= Math.max(right,qr);\r\n                }\r\n                \r\n            }\r\n            // console.log(left,right);\r\n            \r\n        }\r\n        // console.log(copy(tmp));\r\n        gates=new_gates;\r\n        result.push(copy(tmp));\r\n    }\r\n    return result;\r\n}\r\n\r\n// let res = decompose_gates(gates);\r\n// console.log(res[0],res[1],res[2]);","import React from \"react\"\r\n\r\nexport default function Line({ index, item, qubitLineArry, delCurcuitLenght }) {\r\n  // console.log(item, 88)\r\n  let sum = 0\r\n  for (let i = 0; i < index + 1; i++) {\r\n    sum += delCurcuitLenght[i]\r\n  }\r\n\r\n  return (\r\n    <g transform={`translate(${sum * 45 - 45 + 30})`}>\r\n      <rect\r\n        fill=\"rgb(215, 215, 215)\"\r\n        width={5}\r\n        height={qubitLineArry.length * 40}\r\n        y=\"30\"\r\n        x=\"100\"\r\n      ></rect>\r\n      <text x={index > 9 ? 94 : 99} y=\"21.5\" fill=\"green\">\r\n        {index}\r\n      </text>\r\n      <line\r\n        x1={102.5}\r\n        x2={102.5}\r\n        y1={30}\r\n        y2={qubitLineArry.length * 40}\r\n        strokeDasharray=\"4\"\r\n        stroke=\"rgb(45, 45, 45)\"\r\n      ></line>\r\n    </g>\r\n  )\r\n}\r\n","import React, { useState, useRef, useEffect } from \"react\"\r\nimport X from \"./X\"\r\nimport { Button, message } from \"antd\"\r\nimport downloadSvg from \"svg-crowbar\"\r\nimport { decompose_gates } from \"./decmp\"\r\nimport Line from \"./Line\"\r\nexport default function Composer() {\r\n  const initCircuit = [\r\n    [\r\n      { name: \"cz\", qubit: [3, 4] },\r\n      { name: \"cz\", qubit: [5, 6] },\r\n      { name: \"i\", qubit: [7] },\r\n      { name: \"pvz\", qubit: [0] },\r\n    ],\r\n    [\r\n      { name: \"cz\", qubit: [0, 1] },\r\n      { name: \"cz\", qubit: [2, 3] },\r\n      { name: \"i\", qubit: [4] },\r\n      { name: \"i\", qubit: [5] },\r\n      { name: \"cz\", qubit: [6, 7] },\r\n      { name: \"cz\", qubit: [8, 15] },\r\n      { name: \"cz\", qubit: [16, 17] },\r\n      { name: \"cz\", qubit: [9, 14] },\r\n      { name: \"cz\", qubit: [10, 11] },\r\n      { name: \"cz\", qubit: [12, 13] },\r\n    ],\r\n    [\r\n      { name: \"cz\", qubit: [3, 4] },\r\n      { name: \"y\", qubit: [7] },\r\n    ],\r\n    [\r\n      { name: \"cz\", qubit: [3, 4] },\r\n      { name: \"pvz\", qubit: [7] },\r\n    ],\r\n    [{ name: \"pvz\", qubit: [1] }],\r\n    [{ name: \"pvz\", qubit: [2] }],\r\n    [{ name: \"pvz\", qubit: [3] }],\r\n    [{ name: \"pvz\", qubit: [4] }],\r\n    [{ name: \"pvz\", qubit: [5] }],\r\n    [{ name: \"pvz\", qubit: [6] }],\r\n    [{ name: \"pvz\", qubit: [7] }],\r\n    [{ name: \"pvz\", qubit: [8] }],\r\n  ]\r\n  const inputRef = useRef()\r\n  const [circuit, setcircuit] = useState(initCircuit)\r\n  const circuitArray = circuit.map((gates) => [...gates])\r\n  let delCircuit = []\r\n  for (let i = 0; i < circuit.length; i++) {\r\n    delCircuit.push(decompose_gates(circuit[i]))\r\n  }\r\n  let delCurcuitLenght = []\r\n  for (let index = 0; index < delCircuit.length; index++) {\r\n    delCurcuitLenght.push(delCircuit[index].length)\r\n  }\r\n  let delCircuit1 = []\r\n  for (let k = 0; k < delCircuit.length; k++) {\r\n    if (delCircuit[k].length >= 1) {\r\n      for (let j = 0; j < delCircuit[k].length; j++) {\r\n        delCircuit1.push(delCircuit[k][j])\r\n      }\r\n    }\r\n  }\r\n  function findMaxQubit(circuit) {\r\n    return circuit.reduce((max, gates) => {\r\n      const maxQubit = gates.reduce(\r\n        (gatesMax, gate) => Math.max(gatesMax, ...(gate.qubit || [])),\r\n        0\r\n      )\r\n      return Math.max(maxQubit, max)\r\n    }, 0)\r\n  }\r\n  const maxqubit = findMaxQubit(circuitArray)\r\n\r\n  let qubitLineArry = []\r\n  for (let index = 0; index <= maxqubit; index++) {\r\n    qubitLineArry.push(index)\r\n  }\r\n  const width =\r\n    circuit.length * 150 + 300 > 1000 ? circuit.length * 150 + 300 : 1000\r\n  // eslint-disable-next-line no-unused-expressions\r\n  circuit.length * 150 + 300 > 1000 ? circuit.length * 150 + 300 : 1000\r\n  // eslint-disable-next-line no-unused-expressions\r\n  circuit.length * 150 + 300 > 1000 ? circuit.length * 150 + 300 : 1000\r\n  const svgHeight =\r\n    qubitLineArry.length * 40 + 300 > 600\r\n      ? qubitLineArry.length * 40 + 300\r\n      : 600\r\n  // 导入数据\r\n  const [jsonData, setJsonData] = useState(null)\r\n  const onClick = () => {\r\n    inputRef.current.click()\r\n  }\r\n  const handleFileUpload = (event) => {\r\n    const reader = new FileReader()\r\n    reader.onload = () => {\r\n      try {\r\n        const result = JSON.parse(reader.result)\r\n        setJsonData(result)\r\n\r\n        // 将解析得到的 JSON 对象存入状态中\r\n      } catch (error) {\r\n        message.error(error)\r\n      }\r\n    }\r\n    reader.readAsText(event.target.files[0])\r\n  }\r\n  useEffect(() => {\r\n    if (jsonData?.length) {\r\n      setcircuit(jsonData)\r\n    }\r\n  }, [jsonData])\r\n  const exportSvg = () => {\r\n    downloadSvg(document.getElementById(\"circuit\"))\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{ background: \"#fff\", overflowX: \"scroll\", overflowY: \"scroll\" }}\r\n    >\r\n      <div\r\n        style={{\r\n          marginTop: 20,\r\n          marginLeft: 20,\r\n        }}\r\n        className=\"uploding\"\r\n      >\r\n        <input\r\n          ref={inputRef}\r\n          style={{ display: \"none\" }}\r\n          onChange={handleFileUpload}\r\n          type=\"file\"\r\n          accept=\".json\"\r\n        ></input>\r\n        <Button\r\n          onClick={onClick}\r\n          style={{\r\n            marginTop: 20,\r\n          }}\r\n        >\r\n          导入数据(json)\r\n        </Button>\r\n\r\n        <Button\r\n          onClick={exportSvg}\r\n          style={{\r\n            marginTop: 20,\r\n            marginLeft: 10,\r\n          }}\r\n        >\r\n          导出图片\r\n        </Button>\r\n      </div>\r\n      <div\r\n        style={{\r\n          background: \"#fff\",\r\n          width: width,\r\n          height: svgHeight,\r\n          marginTop: 50,\r\n        }}\r\n        className=\"svgConten\"\r\n      >\r\n        <svg\r\n          style={{\r\n            backgroundColor: \"#fff\",\r\n          }}\r\n          id=\"circuit\"\r\n          width={width}\r\n          height={svgHeight}\r\n        >\r\n          {qubitLineArry.map((qubit, index) => (\r\n            <g\r\n              key={index}\r\n              transform={`translate(60,${20 + index * 40 ? index * 40 : 0})`}\r\n            >\r\n              <g transform=\"translate(-14,4)\">\r\n                <text\r\n                  x=\"38.4\"\r\n                  y=\"36\"\r\n                  dy=\".3em\"\r\n                  fill=\"rgb(111, 111, 111)\"\r\n                  fontWeight=\"400\"\r\n                  textAnchor=\"end\"\r\n                  fontSize=\"14px\"\r\n                >\r\n                  <tspan>q[{index}]</tspan>\r\n                </text>\r\n              </g>\r\n              <line\r\n                className=\"qubit\"\r\n                strokeWidth=\"2\"\r\n                x1=\"30\"\r\n                y1=\"40\"\r\n                x2={width - 80}\r\n                y2=\"40\"\r\n                data-dis=\"0\"\r\n                stroke=\"black\"\r\n              ></line>\r\n            </g>\r\n          ))}\r\n          {delCircuit1.map((item, index) => (\r\n            <X\r\n              qubitLineArry={qubitLineArry}\r\n              key={index}\r\n              x={index}\r\n              item={item}\r\n            />\r\n          ))}\r\n          {delCurcuitLenght.map((item, index) => (\r\n            <Line\r\n              key={index}\r\n              item={item}\r\n              index={index}\r\n              qubitLineArry={qubitLineArry}\r\n              delCurcuitLenght={delCurcuitLenght}\r\n            />\r\n          ))}\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"names":["cz","_jsx","cx","cy","r","fill","I","_jsxs","children","y","type","width","height","x","Pvz","Vz","YGate","OtherGate","_ref","name","color","letter","charCode","charCodeAt","generateRGB","textAnchor","alignmentBaseline","Y","_gate$qubit","_gate$qubit2","gate","qubit","map","item","index","transform","concat","Cz","length","strokeWidth","stroke","x1","x2","y1","y2","X","qubitLineArry","_Fragment","copy","element","JSON","parse","stringify","decompose_gates","gates","ql","qr","result","tmp","left","right","new_gates","i","_gates$i$qubit","push","Math","min","max","Line","delCurcuitLenght","sum","strokeDasharray","Composer","inputRef","useRef","_useState","useState","_useState2","_slicedToArray","circuit","setcircuit","circuitArray","_toConsumableArray","delCircuit","delCircuit1","k","j","maxqubit","reduce","maxQubit","gatesMax","apply","findMaxQubit","svgHeight","_useState3","_useState4","jsonData","setJsonData","useEffect","style","background","overflowX","overflowY","marginTop","marginLeft","className","ref","display","onChange","event","reader","FileReader","onload","error","message","readAsText","target","files","accept","Button","onClick","current","click","downloadSvg","document","getElementById","backgroundColor","id","dy","fontWeight","fontSize"],"sourceRoot":""}
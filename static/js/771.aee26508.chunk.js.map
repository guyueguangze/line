{"version":3,"file":"static/js/771.aee26508.chunk.js","mappings":"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","sources":["page/Composer/gates/Cz.jsx","page/Composer/gates/I.jsx","page/Composer/gates/Pvz.jsx","page/Composer/gates/Vz.jsx","page/Composer/gates/YGate.jsx","page/Composer/OtherGate.jsx","page/Composer/Y.jsx","page/Composer/X.jsx","page/Composer/decmp.js","page/Composer/Line.jsx","page/Composer/gates/SimpleGate.jsx","page/Composer/SimpleY.jsx","page/Composer/SimpleX.jsx","page/Composer/gates/MeasurGate.jsx","page/Composer/SimpleLine.jsx","page/Composer/SimpleModen.jsx","page/Composer/circuit.js","page/Composer/NormalMden.jsx","page/Composer/index.jsx"],"sourcesContent":["import React from \"react\"\r\n\r\nexport default function cz({ color }) {\r\n  return (\r\n    <circle\r\n      cx=\"16\"\r\n      cy=\"16\"\r\n      r=\"4\"\r\n      fill={color ? color : \"rgb(126, 164, 248)\"}\r\n    ></circle>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default function I() {\r\n  return (\r\n    <g>\r\n      <rect\r\n        y=\"0\"\r\n        type=\"h\"\r\n        fill=\"rgb(216, 211, 231)\"\r\n        width=\"32\"\r\n        height=\"32\"\r\n      ></rect>\r\n      <text x=\"14.21875\" y=\"21.5\" fill=\"#ffffff\">\r\n        I\r\n      </text>\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default function Pvz() {\r\n  return (\r\n    <g>\r\n      <rect\r\n        y=\"0\"\r\n        type=\"h\"\r\n        fill=\"rgb(226, 106, 84)\"\r\n        width=\"32\"\r\n        height=\"32\"\r\n      ></rect>\r\n      <text x=\"4.21875\" y=\"21.5\" fill=\"#ffffff\">\r\n        PVZ\r\n      </text>\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default function Vz() {\r\n  return (\r\n    <g>\r\n      <rect\r\n        y=\"0\"\r\n        type=\"h\"\r\n        fill=\"rgb(96, 199, 175)\"\r\n        width=\"32\"\r\n        height=\"32\"\r\n      ></rect>\r\n      <text x=\"8.21875\" y=\"21.5\" fill=\"#ffffff\">\r\n        VZ\r\n      </text>\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default function YGate() {\r\n  return (\r\n    <g>\r\n      <rect\r\n        y=\"0\"\r\n        type=\"h\"\r\n        fill=\"rgb(80, 161, 226)\"\r\n        width=\"32\"\r\n        height=\"32\"\r\n      ></rect>\r\n      <text x=\"12.21875\" y=\"21.5\" fill=\"balck\">\r\n        Y\r\n      </text>\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default function OtherGate({ name }) {\r\n  function generateRGB(letter) {\r\n    var charCode = letter.charCodeAt(0)\r\n    var r = (charCode * 43) % 256\r\n    var g = (charCode * 67) % 256\r\n    var b = (charCode * 97) % 256\r\n\r\n    return \"rgb(\" + r + \", \" + g + \", \" + b + \")\"\r\n  }\r\n  let color = generateRGB(name)\r\n  return (\r\n    <g>\r\n      <rect y=\"0\" type=\"h\" fill={color} width=\"32\" height=\"32\"></rect>\r\n      <text\r\n        textAnchor=\"middle\"\r\n        alignmentBaseline=\"middle\"\r\n        width=\"32\"\r\n        height=\"32\"\r\n        x=\"14.21875\"\r\n        y=\"18\"\r\n        fill=\"#ffffff\"\r\n      >\r\n        {name}\r\n      </text>\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport Cz from \"./gates/Cz\"\r\nimport I from \"./gates/I\"\r\nimport Pvz from \"./gates/Pvz\"\r\nimport Vz from \"./gates/Vz\"\r\nimport YGate from \"./gates/YGate\"\r\nimport OtherGate from \"./OtherGate\"\r\nexport default function Y({ gate }) {\r\n  let lineY1 = Math.min(...gate?.qubit)\r\n  let lineY2 = Math.max(...gate?.qubit)\r\n  return (\r\n    <g>\r\n      {gate &&\r\n        gate.qubit?.map((item, index) => (\r\n          <g key={index} transform={`translate(0,${item * 40 + 24})`}>\r\n            {(() => {\r\n              switch (gate.name) {\r\n                case \"cz\":\r\n                  return <Cz />\r\n                case \"i\":\r\n                  return <I />\r\n                case \"pvz\":\r\n                  return <Pvz />\r\n                case \"vz\":\r\n                  return <Vz />\r\n                case \"y\":\r\n                  return <YGate />\r\n\r\n                default:\r\n                  return <OtherGate name={gate?.name} />\r\n              }\r\n            })()}\r\n          </g>\r\n        ))}\r\n      {gate.qubit?.length > 1 && (\r\n        <line\r\n          strokeWidth=\"2\"\r\n          stroke=\"rgb(126, 164, 248)\"\r\n          x1={16}\r\n          x2={16}\r\n          y1={lineY1 * 40 + 40}\r\n          y2={lineY2 * 40 + 40}\r\n        ></line>\r\n      )}\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport Y from \"./Y\"\r\n\r\nexport default function X({ x, item, qubitLineArry }) {\r\n  // let ygate = decompose_gates(item)\r\n  // console.log(ygate, 333)\r\n  return (\r\n    <>\r\n      <g transform={`translate(${x * 45 + 95})`}>\r\n        {/* <g transform={`translate(${x * 30})`}> */}\r\n        {item?.map((gate, index) => (\r\n          <Y name={item.name} x={x} key={index} gate={gate} y={index} />\r\n        ))}\r\n        {/* <rect\r\n          fill=\"rgb(215, 215, 215)\"\r\n          width={5}\r\n          height={qubitLineArry.length * 40}\r\n          y=\"30\"\r\n          x=\"100\"\r\n        ></rect> */}\r\n        {/* <line\r\n          x1={102.5}\r\n          x2={102.5}\r\n          y1={30}\r\n          y2={qubitLineArry.length * 40}\r\n          strokeDasharray=\"4\"\r\n          stroke=\"rgb(45, 45, 45)\"\r\n        ></line> */}\r\n        {/* </g> */}\r\n      </g>\r\n    </>\r\n  )\r\n}\r\n","\r\n// let gates = [\r\n//     { name: \"cz\", qubit: [0, 1] },\r\n//     { name: \"cz\", qubit: [2, 3] },\r\n//     { name: \"i\", qubit: [4] }, \r\n\r\n\r\n//     { name: \"i\", qubit: [5] },\r\n//     { name: \"cz\", qubit: [6, 7] },\r\n//     { name: \"cz\", qubit: [8, 15] },\r\n//     { name: \"cz\", qubit: [16, 17] },\r\n//     { name: \"cz\", qubit: [9, 14] },\r\n//     { name: \"cz\", qubit: [10, 11] },\r\n//     { name: \"cz\", qubit: [12, 13] },\r\n// ]\r\n\r\nfunction copy(element){\r\n    return JSON.parse(JSON.stringify(element));\r\n    \r\n}\r\n\r\n// export  function decompose_gates(gates){\r\n//     let result = [];\r\n//     let tmp = [];\r\n//     let left = 0;\r\n//     let right = 0;\r\n//     let ql,qr;\r\n//     while(gates.length !== 0){\r\n//         left=-1;\r\n//         right=-1;\r\n//         let new_gates=[];\r\n//         tmp=[];\r\n//         for(let i=0;i<gates.length;i++){\r\n//             if(gates[i]['qubit']?.length==1){\r\n//                 ql=gates[i]['qubit']['0'];\r\n//                 qr=gates[i]['qubit']['0'];\r\n//             }\r\n//             else{\r\n//                 ql=gates[i]['qubit']['0'];\r\n//                 qr=gates[i]['qubit']['1'];\r\n//             }\r\n            \r\n//             if(left==-1){\r\n//                 left = ql;\r\n//                 right = qr;\r\n//                 tmp.push(copy(gates[i]));\r\n//             }\r\n//             else{\r\n//                 if(qr>=left&&right>=ql){\r\n//                     new_gates.push(copy(gates[i]));\r\n//                 }\r\n//                 else{\r\n//                     tmp.push(copy(gates[i]));\r\n//                     left = Math.min(left,ql);\r\n//                     right= Math.max(right,qr);\r\n//                 }\r\n                \r\n//             }\r\n//             // console.log(left,right);\r\n            \r\n//         }\r\n//         // console.log(copy(tmp));\r\n//         gates=new_gates;\r\n//         result.push(copy(tmp));\r\n//     }\r\n//     return result;\r\n// }\r\nexport function decompose_gates(gates){\r\n    let result = [];\r\n    let tmp = [];\r\n    let left = 0;\r\n    let right = 0;\r\n    let ql,qr;\r\n    while(gates.length !== 0){\r\n        left=-1;\r\n        right=-1;\r\n        let new_gates=[];\r\n        tmp=[];\r\n        for(let i=0;i<gates.length;i++){\r\n            gates[i]['qubit'].sort(function(a, b){return a - b});\r\n            if(gates[i]['qubit'].length==1){\r\n                ql=gates[i]['qubit'][0];\r\n                qr=gates[i]['qubit'][0];\r\n            }\r\n            else{\r\n                ql=gates[i]['qubit'][0];\r\n                qr=gates[i]['qubit'][gates[i]['qubit'].length-1];\r\n            }\r\n            \r\n            if(left==-1){\r\n                left = ql;\r\n                right = qr;\r\n                tmp.push(copy(gates[i]));\r\n            }\r\n            else{\r\n                if(qr>=left&&right>=ql){\r\n                    new_gates.push(copy(gates[i]));\r\n                }\r\n                else{\r\n                    tmp.push(copy(gates[i]));\r\n                    left = Math.min(left,ql);\r\n                    right= Math.max(right,qr);\r\n                }\r\n                \r\n            }\r\n            // console.log(left,right);\r\n            \r\n        }\r\n        // console.log(copy(tmp));\r\n        gates=new_gates;\r\n        result.push(copy(tmp));\r\n    }\r\n    result.sort(function(a,b){\r\n        let m1=-1,m2=-1;\r\n        for(let i=0;i<a.length;i++){\r\n            m1=Math.max(a[i]['qubit'].length,m1);\r\n        }\r\n        for(let i=0;i<b.length;i++){\r\n            m2=Math.max(b[i]['qubit'].length,m2);\r\n        }\r\n\r\n        return m2-m1;\r\n    });\r\n    return result;\r\n}\r\n\r\n// let res = decompose_gates(gates);\r\n// console.log(res[0],res[1],res[2]);","import React from \"react\"\r\n\r\nexport default function Line({ index, item, qubitLineArry, delCurcuitLenght }) {\r\n  // console.log(item, 88)\r\n  let sum = 0\r\n  for (let i = 0; i < index + 1; i++) {\r\n    sum += delCurcuitLenght[i]\r\n  }\r\n\r\n  return (\r\n    <g transform={`translate(${sum * 45 - 45 + 30})`}>\r\n      <rect\r\n        fill=\"rgb(215, 215, 215)\"\r\n        width={5}\r\n        height={qubitLineArry.length * 40}\r\n        y=\"30\"\r\n        x=\"100\"\r\n      ></rect>\r\n      <text x={index > 9 ? 94 : 99} y=\"21.5\" fill=\"green\">\r\n        {index}\r\n      </text>\r\n      <line\r\n        x1={102.5}\r\n        x2={102.5}\r\n        y1={30}\r\n        y2={qubitLineArry.length * 40}\r\n        strokeDasharray=\"4\"\r\n        stroke=\"rgb(45, 45, 45)\"\r\n      ></line>\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default function SimpleGate({ color }) {\r\n  return (\r\n    <circle\r\n      cx=\"16\"\r\n      cy=\"16\"\r\n      r=\"4\"\r\n      fill={color ? color : \"rgb(126, 164, 248)\"}\r\n      stroke=\"black\"\r\n      strokeWidth=\"1\"\r\n    ></circle>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport SimpleGate from \"./gates/SimpleGate\"\r\nexport default function SimpleY({ gate }) {\r\n  let lineY1 = Math.min(...gate?.qubit)\r\n  let lineY2 = Math.max(...gate?.qubit)\r\n  return (\r\n    <g>\r\n      {gate.qubit?.length > 1 && (\r\n        <line\r\n          strokeWidth=\"1\"\r\n          stroke=\"rgb(31, 161, 206)\"\r\n          x1={16}\r\n          x2={16}\r\n          y1={lineY1 * 20 + 40}\r\n          y2={lineY2 * 20 + 40}\r\n        ></line>\r\n      )}\r\n      {gate.qubit?.map((item, index) => (\r\n        <g key={index} transform={`translate(0,${item * 20 + 24})`}>\r\n          <SimpleGate color={gate.qubit.length > 1 ? \"yellow\" : \"red\"} />\r\n        </g>\r\n      ))}\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport SimpleY from \"./SimpleY\"\r\nexport default function SimpleX({ x, item }) {\r\n  return (\r\n    <g>\r\n      {\r\n        <g transform={`translate(${x * 20 + 95})`}>\r\n          {item?.map((gate, index) => (\r\n            <SimpleY name={item.name} x={x} key={index} gate={gate} y={index} />\r\n          ))}\r\n        </g>\r\n      }\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default function MeasurGate() {\r\n  return (\r\n    <g>\r\n      <rect x=\"8\" y=\"16\" width={23} height={17} fill=\"#fff\"></rect>\r\n      <path\r\n        d=\"M8, 30A10 10 90 1 1 30 30M19, 30\"\r\n        strokeWidth=\"1\"\r\n        stroke=\"black\"\r\n        fill=\"none\"\r\n      ></path>\r\n      <circle r=\"2.5\" cx=\"19\" cy=\"28\" fill=\"black\"></circle>\r\n      <line\r\n        x1=\"19\"\r\n        y1=\"28\"\r\n        x2=\"28\"\r\n        y2=\"15\"\r\n        strokeWidth=\"1\"\r\n        stroke=\"black\"\r\n      ></line>\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default function SimpleLine({\r\n  index,\r\n  item,\r\n  qubitLineArry,\r\n  delCurcuitLenght,\r\n}) {\r\n  // console.log(item, 88)\r\n  let sum = 0\r\n  for (let i = 0; i < index + 1; i++) {\r\n    sum += delCurcuitLenght[i]\r\n  }\r\n\r\n  return (\r\n    <g transform={`translate(${sum * 20 - 20 + 8})`}>\r\n      {/* <rect\r\n        fill=\"rgb(215, 215, 215)\"\r\n        width={5}\r\n        height={qubitLineArry.length * 40}\r\n        y=\"30\"\r\n        x=\"100\"\r\n      ></rect> */}\r\n      <text fontSize={12} x={index > 9 ? 94 : 99} y=\"21.5\" fill=\"green\">\r\n        {index}\r\n      </text>\r\n      {/* <line\r\n        x1={102.5}\r\n        x2={102.5}\r\n        y1={30}\r\n        y2={qubitLineArry.length * 40}\r\n        strokeDasharray=\"4\"\r\n        stroke=\"rgb(45, 45, 45)\"\r\n      ></line> */}\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport SimpleX from \"./SimpleX\"\r\nimport MeasurGate from \"./gates/MeasurGate\"\r\nimport SimpleLine from \"./SimpleLine\"\r\nexport default function SimpleModen({\r\n  circuit,\r\n  qubitLineArry,\r\n  delCircuit1,\r\n  delCurcuitLenght,\r\n}) {\r\n  let svgWidth = circuit.length * 20 + 230\r\n  let svgHeight = qubitLineArry.length * 20 + 230\r\n  return (\r\n    <div style={{ marginLeft: 50 }}>\r\n      <svg\r\n        width={svgWidth}\r\n        height={svgHeight}\r\n        style={{\r\n          backgroundColor: \"#fff\",\r\n        }}\r\n        id=\"circuit\"\r\n      >\r\n        {qubitLineArry.map((qubit, index) => (\r\n          <g\r\n            key={index}\r\n            transform={`translate(60,${20 + index * 20 ? index * 20 : 0})`}\r\n          >\r\n            <g transform=\"translate(-14,4)\">\r\n              <text\r\n                x=\"38.4\"\r\n                y=\"36\"\r\n                dy=\".3em\"\r\n                fill=\"rgb(111, 111, 111)\"\r\n                fontWeight=\"400\"\r\n                textAnchor=\"end\"\r\n                fontSize=\"14px\"\r\n              >\r\n                <tspan>q[{index}]</tspan>\r\n              </text>\r\n            </g>\r\n            <line\r\n              className=\"qubit\"\r\n              strokeWidth=\"1\"\r\n              x1=\"30\"\r\n              y1=\"40\"\r\n              x2={svgWidth - 80}\r\n              y2=\"40\"\r\n              data-dis=\"0\"\r\n              stroke=\"black\"\r\n            ></line>\r\n          </g>\r\n        ))}\r\n        {qubitLineArry.map((item, index) => (\r\n          <g\r\n            transform={`translate(${circuit.length * 20 + 180},${\r\n              20 + index * 20 ? index * 20 + 17 : 0\r\n            })`}\r\n          >\r\n            <MeasurGate />\r\n          </g>\r\n        ))}\r\n        {delCircuit1.map((item, index) => (\r\n          <SimpleX\r\n            qubitLineArry={qubitLineArry}\r\n            key={index}\r\n            x={index}\r\n            item={item}\r\n          />\r\n        ))}\r\n        {delCurcuitLenght.map((item, index) => (\r\n          <SimpleLine\r\n            key={index}\r\n            item={item}\r\n            index={index}\r\n            qubitLineArry={qubitLineArry}\r\n            delCurcuitLenght={delCurcuitLenght}\r\n          />\r\n        ))}\r\n      </svg>\r\n    </div>\r\n  )\r\n}\r\n","export const initCircuit = [\r\n    [\r\n      { name: \"cz\", qubit: [3, 4,5,6,7] },\r\n      { name: \"cz\", qubit: [5, 6] },\r\n      { name: \"i\", qubit: [7] },\r\n      { name: \"pvz\", qubit: [0] },\r\n    ],\r\n    [\r\n      { name: \"cz\", qubit: [0, 1] },\r\n      { name: \"cz\", qubit: [2, 3,4,5] },\r\n      { name: \"i\", qubit: [4] },\r\n      { name: \"i\", qubit: [5] },\r\n      { name: \"cz\", qubit: [6, 7,8,9] },\r\n      { name: \"cz\", qubit: [8,9,10,11,12,13,14,15] },\r\n      { name: \"cz\", qubit: [16, 17] },\r\n      { name: \"cz\", qubit: [9, 14] },\r\n      { name: \"cz\", qubit: [10, 11] },\r\n      { name: \"cz\", qubit: [12, 13] },\r\n    ],\r\n    [\r\n      { name: \"cz\", qubit: [3, 4,5] },\r\n      { name: \"y\", qubit: [7] },\r\n    ],\r\n    [\r\n      { name: \"cz\", qubit: [3, 4] },\r\n      { name: \"pvz\", qubit: [7] },\r\n    ],\r\n    [{ name: \"pvz\", qubit: [1] }],\r\n    [{ name: \"pvz\", qubit: [2] }],\r\n    [{ name: \"pvz\", qubit: [3] }],\r\n    [{ name: \"pvz\", qubit: [4] }],\r\n    [{ name: \"pvz\", qubit: [5] }],\r\n    [{ name: \"pvz\", qubit: [6] }],\r\n    [{ name: \"pvz\", qubit: [7] }],\r\n    [{ name: \"pvz\", qubit: [8] }],\r\n  ]","import React from \"react\"\r\nimport X from \"./X\"\r\nimport Line from \"./Line\"\r\nexport default function NormalMden({\r\n  circuit,\r\n  qubitLineArry,\r\n  delCircuit1,\r\n  delCurcuitLenght,\r\n}) {\r\n  let svgWidth = circuit.length * 60 + 200\r\n  let svgHeight = qubitLineArry.length * 60 + 200\r\n  return (\r\n    <div>\r\n      <svg\r\n        style={{\r\n          backgroundColor: \"#fff\",\r\n        }}\r\n        id=\"circuit\"\r\n        width={svgWidth}\r\n        height={svgHeight}\r\n      >\r\n        {qubitLineArry.map((qubit, index) => (\r\n          <g\r\n            key={index}\r\n            transform={`translate(60,${20 + index * 40 ? index * 40 : 0})`}\r\n          >\r\n            <g transform=\"translate(-14,4)\">\r\n              <text\r\n                x=\"38.4\"\r\n                y=\"36\"\r\n                dy=\".3em\"\r\n                fill=\"rgb(111, 111, 111)\"\r\n                fontWeight=\"400\"\r\n                textAnchor=\"end\"\r\n                fontSize=\"14px\"\r\n              >\r\n                <tspan>q[{index}]</tspan>\r\n              </text>\r\n            </g>\r\n            <line\r\n              className=\"qubit\"\r\n              strokeWidth=\"2\"\r\n              x1=\"30\"\r\n              y1=\"40\"\r\n              x2={svgWidth - 80}\r\n              y2=\"40\"\r\n              data-dis=\"0\"\r\n              stroke=\"black\"\r\n            ></line>\r\n          </g>\r\n        ))}\r\n        {delCircuit1.map((item, index) => (\r\n          <X qubitLineArry={qubitLineArry} key={index} x={index} item={item} />\r\n        ))}\r\n        {delCurcuitLenght.map((item, index) => (\r\n          <Line\r\n            key={index}\r\n            item={item}\r\n            index={index}\r\n            qubitLineArry={qubitLineArry}\r\n            delCurcuitLenght={delCurcuitLenght}\r\n          />\r\n        ))}\r\n      </svg>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useRef, useEffect } from \"react\"\r\nimport X from \"./X\"\r\nimport { Button, message, Tabs } from \"antd\"\r\nimport downloadSvg from \"svg-crowbar\"\r\nimport { decompose_gates } from \"./decmp\"\r\nimport Line from \"./Line\"\r\nimport SimpleModen from \"./SimpleModen\"\r\nimport { initCircuit } from \"./circuit\"\r\nimport NormalMden from \"./NormalMden\"\r\nexport default function Composer() {\r\n  const inputRef = useRef()\r\n  const [circuit, setcircuit] = useState(initCircuit)\r\n  const circuitArray = circuit.map((gates) => [...gates])\r\n  let delCircuit = []\r\n  for (let i = 0; i < circuit.length; i++) {\r\n    delCircuit.push(decompose_gates(circuit[i]))\r\n  }\r\n  let delCurcuitLenght = []\r\n  for (let index = 0; index < delCircuit.length; index++) {\r\n    delCurcuitLenght.push(delCircuit[index].length)\r\n  }\r\n  let delCircuit1 = []\r\n  for (let k = 0; k < delCircuit.length; k++) {\r\n    if (delCircuit[k].length >= 1) {\r\n      for (let j = 0; j < delCircuit[k].length; j++) {\r\n        delCircuit1.push(delCircuit[k][j])\r\n      }\r\n    }\r\n  }\r\n  function findMaxQubit(circuit) {\r\n    return circuit.reduce((max, gates) => {\r\n      const maxQubit = gates.reduce(\r\n        (gatesMax, gate) => Math.max(gatesMax, ...(gate.qubit || [])),\r\n        0\r\n      )\r\n      return Math.max(maxQubit, max)\r\n    }, 0)\r\n  }\r\n  const maxqubit = findMaxQubit(circuitArray)\r\n\r\n  let qubitLineArry = []\r\n  for (let index = 0; index <= maxqubit; index++) {\r\n    qubitLineArry.push(index)\r\n  }\r\n  const width =\r\n    circuit.length * 150 + 300 > 1000 ? circuit.length * 150 + 300 : 1000\r\n  // eslint-disable-next-line no-unused-expressions\r\n  circuit.length * 150 + 300 > 1000 ? circuit.length * 150 + 300 : 1000\r\n  // eslint-disable-next-line no-unused-expressions\r\n  circuit.length * 150 + 300 > 1000 ? circuit.length * 150 + 300 : 1000\r\n  const svgHeight =\r\n    qubitLineArry.length * 40 + 300 > 600\r\n      ? qubitLineArry.length * 40 + 300\r\n      : 600\r\n  // 导入数据\r\n  const [jsonData, setJsonData] = useState(null)\r\n  const onClick = () => {\r\n    inputRef.current.click()\r\n  }\r\n  const handleFileUpload = (event) => {\r\n    const reader = new FileReader()\r\n    reader.onload = () => {\r\n      try {\r\n        const result = JSON.parse(reader.result)\r\n        setJsonData(result)\r\n\r\n        // 将解析得到的 JSON 对象存入状态中\r\n      } catch (error) {\r\n        message.error(error)\r\n      }\r\n    }\r\n    reader.readAsText(event.target.files[0])\r\n  }\r\n  useEffect(() => {\r\n    if (jsonData?.length) {\r\n      setcircuit(jsonData)\r\n    }\r\n  }, [jsonData])\r\n  const exportSvg = () => {\r\n    downloadSvg(document.getElementById(\"circuit\"))\r\n  }\r\n\r\n  const items = [\r\n    {\r\n      key: \"1\",\r\n      label: `Normal`,\r\n      children: (\r\n        <NormalMden\r\n          delCircuit1={delCircuit1}\r\n          qubitLineArry={qubitLineArry}\r\n          circuit={circuit}\r\n          delCurcuitLenght={delCurcuitLenght}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      key: \"2\",\r\n      label: `Simple`,\r\n      children: (\r\n        <SimpleModen\r\n          delCircuit1={delCircuit1}\r\n          qubitLineArry={qubitLineArry}\r\n          circuit={circuit}\r\n          delCurcuitLenght={delCurcuitLenght}\r\n        />\r\n      ),\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <div\r\n      style={{ background: \"#fff\", overflowX: \"scroll\", overflowY: \"scroll\" }}\r\n    >\r\n      <div\r\n        style={{\r\n          marginTop: 20,\r\n          marginLeft: 20,\r\n        }}\r\n        className=\"uploding\"\r\n      >\r\n        <input\r\n          ref={inputRef}\r\n          style={{ display: \"none\" }}\r\n          onChange={handleFileUpload}\r\n          type=\"file\"\r\n          accept=\".json\"\r\n        ></input>\r\n        <Button\r\n          onClick={onClick}\r\n          style={{\r\n            marginTop: 20,\r\n          }}\r\n        >\r\n          导入数据(json)\r\n        </Button>\r\n\r\n        <Button\r\n          onClick={exportSvg}\r\n          style={{\r\n            marginTop: 20,\r\n            marginLeft: 10,\r\n          }}\r\n        >\r\n          导出图片\r\n        </Button>\r\n      </div>\r\n      <div\r\n        style={{\r\n          background: \"#fff\",\r\n          width: width,\r\n          height: svgHeight,\r\n          marginTop: 50,\r\n          marginLeft: 50,\r\n        }}\r\n        className=\"svgConten\"\r\n      >\r\n        <Tabs defaultActiveKey=\"1\" items={items} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"names":["cz","_ref","color","_jsx","cx","cy","r","fill","I","_jsxs","children","y","type","width","height","x","Pvz","Vz","YGate","OtherGate","name","letter","charCode","charCodeAt","generateRGB","textAnchor","alignmentBaseline","Y","_gate$qubit","_gate$qubit2","gate","lineY1","Math","min","apply","_toConsumableArray","qubit","lineY2","max","map","item","index","transform","concat","Cz","length","strokeWidth","stroke","x1","x2","y1","y2","X","qubitLineArry","_Fragment","copy","element","JSON","parse","stringify","decompose_gates","gates","ql","qr","result","tmp","left","right","new_gates","i","sort","a","b","push","m1","m2","Line","delCurcuitLenght","sum","strokeDasharray","SimpleGate","SimpleY","SimpleX","MeasurGate","d","SimpleLine","fontSize","SimpleModen","circuit","delCircuit1","svgWidth","svgHeight","style","marginLeft","backgroundColor","id","dy","fontWeight","className","initCircuit","NormalMden","Composer","inputRef","useRef","_useState","useState","_useState2","_slicedToArray","setcircuit","circuitArray","delCircuit","k","j","maxqubit","reduce","maxQubit","gatesMax","findMaxQubit","_useState3","_useState4","jsonData","setJsonData","useEffect","items","key","label","background","overflowX","overflowY","marginTop","ref","display","onChange","event","reader","FileReader","onload","error","message","readAsText","target","files","accept","Button","onClick","current","click","downloadSvg","document","getElementById","Tabs","defaultActiveKey"],"sourceRoot":""}
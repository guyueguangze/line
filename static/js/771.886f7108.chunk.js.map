{"version":3,"file":"static/js/771.886f7108.chunk.js","mappings":"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","sources":["page/Composer/decmp.js","page/Composer/gates/SimpleGate.jsx","page/Composer/SimpleY.jsx","page/Composer/SimpleX.jsx","page/Composer/gates/MeasurGate.jsx","page/Composer/SimpleLine.jsx","page/Composer/SimpleModen.jsx","page/Composer/circuit.js","page/Composer/gates/Cz.jsx","page/Composer/gates/I.jsx","page/Composer/gates/Pvz.jsx","page/Composer/gates/Vz.jsx","page/Composer/gates/YGate.jsx","page/Composer/OtherGate.jsx","page/Composer/Y.jsx","page/Composer/X.jsx","page/Composer/Line.jsx","page/Composer/NormalMden.jsx","page/Composer/index.jsx"],"sourcesContent":["\r\n// let gates = [\r\n//     { name: \"cz\", qubit: [0, 1] },\r\n//     { name: \"cz\", qubit: [2, 3] },\r\n//     { name: \"i\", qubit: [4] }, \r\n\r\n\r\n//     { name: \"i\", qubit: [5] },\r\n//     { name: \"cz\", qubit: [6, 7] },\r\n//     { name: \"cz\", qubit: [8, 15] },\r\n//     { name: \"cz\", qubit: [16, 17] },\r\n//     { name: \"cz\", qubit: [9, 14] },\r\n//     { name: \"cz\", qubit: [10, 11] },\r\n//     { name: \"cz\", qubit: [12, 13] },\r\n// ]\r\n\r\nfunction copy(element){\r\n    return JSON.parse(JSON.stringify(element));\r\n    \r\n}\r\n\r\n// export  function decompose_gates(gates){\r\n//     let result = [];\r\n//     let tmp = [];\r\n//     let left = 0;\r\n//     let right = 0;\r\n//     let ql,qr;\r\n//     while(gates.length !== 0){\r\n//         left=-1;\r\n//         right=-1;\r\n//         let new_gates=[];\r\n//         tmp=[];\r\n//         for(let i=0;i<gates.length;i++){\r\n//             if(gates[i]['qubit']?.length==1){\r\n//                 ql=gates[i]['qubit']['0'];\r\n//                 qr=gates[i]['qubit']['0'];\r\n//             }\r\n//             else{\r\n//                 ql=gates[i]['qubit']['0'];\r\n//                 qr=gates[i]['qubit']['1'];\r\n//             }\r\n            \r\n//             if(left==-1){\r\n//                 left = ql;\r\n//                 right = qr;\r\n//                 tmp.push(copy(gates[i]));\r\n//             }\r\n//             else{\r\n//                 if(qr>=left&&right>=ql){\r\n//                     new_gates.push(copy(gates[i]));\r\n//                 }\r\n//                 else{\r\n//                     tmp.push(copy(gates[i]));\r\n//                     left = Math.min(left,ql);\r\n//                     right= Math.max(right,qr);\r\n//                 }\r\n                \r\n//             }\r\n//             // console.log(left,right);\r\n            \r\n//         }\r\n//         // console.log(copy(tmp));\r\n//         gates=new_gates;\r\n//         result.push(copy(tmp));\r\n//     }\r\n//     return result;\r\n// }\r\nexport function decompose_gates(gates){\r\n    let result = [];\r\n    let tmp = [];\r\n    let left = 0;\r\n    let right = 0;\r\n    let ql,qr;\r\n    while(gates.length !== 0){\r\n        left=-1;\r\n        right=-1;\r\n        let new_gates=[];\r\n        tmp=[];\r\n        for(let i=0;i<gates.length;i++){\r\n            gates[i]['qubit'].sort(function(a, b){return a - b});\r\n            if(gates[i]['qubit'].length==1){\r\n                ql=gates[i]['qubit'][0];\r\n                qr=gates[i]['qubit'][0];\r\n            }\r\n            else{\r\n                ql=gates[i]['qubit'][0];\r\n                qr=gates[i]['qubit'][gates[i]['qubit'].length-1];\r\n            }\r\n            \r\n            if(left==-1){\r\n                left = ql;\r\n                right = qr;\r\n                tmp.push(copy(gates[i]));\r\n            }\r\n            else{\r\n                if(qr>=left&&right>=ql){\r\n                    new_gates.push(copy(gates[i]));\r\n                }\r\n                else{\r\n                    tmp.push(copy(gates[i]));\r\n                    left = Math.min(left,ql);\r\n                    right= Math.max(right,qr);\r\n                }\r\n                \r\n            }\r\n            // console.log(left,right);\r\n            \r\n        }\r\n        // console.log(copy(tmp));\r\n        gates=new_gates;\r\n        result.push(copy(tmp));\r\n    }\r\n    result.sort(function(a,b){\r\n        let m1=-1,m2=-1;\r\n        for(let i=0;i<a.length;i++){\r\n            m1=Math.max(a[i]['qubit'].length,m1);\r\n        }\r\n        for(let i=0;i<b.length;i++){\r\n            m2=Math.max(b[i]['qubit'].length,m2);\r\n        }\r\n\r\n        return m2-m1;\r\n    });\r\n    return result;\r\n}\r\n\r\n// let res = decompose_gates(gates);\r\n// console.log(res[0],res[1],res[2]);","import React from \"react\"\r\n\r\nexport default function SimpleGate({ color }) {\r\n  return (\r\n    <circle\r\n      cx=\"16\"\r\n      cy=\"16\"\r\n      r=\"4\"\r\n      fill={color ? color : \"rgb(126, 164, 248)\"}\r\n      stroke=\"black\"\r\n      strokeWidth=\"1\"\r\n    ></circle>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport SimpleGate from \"./gates/SimpleGate\"\r\nexport default function SimpleY({ gate }) {\r\n  let lineY1 = Math.min(...gate?.qubit)\r\n  let lineY2 = Math.max(...gate?.qubit)\r\n  return (\r\n    <g>\r\n      {gate.qubit?.length > 1 && (\r\n        <line\r\n          strokeWidth=\"1\"\r\n          stroke=\"rgb(31, 161, 206)\"\r\n          x1={16}\r\n          x2={16}\r\n          y1={lineY1 * 20 + 40}\r\n          y2={lineY2 * 20 + 40}\r\n        ></line>\r\n      )}\r\n      {gate.qubit?.map((item, index) => (\r\n        <g key={index} transform={`translate(0,${item * 20 + 24})`}>\r\n          <SimpleGate color={gate.qubit.length > 1 ? \"yellow\" : \"red\"} />\r\n        </g>\r\n      ))}\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport SimpleY from \"./SimpleY\"\r\nexport default function SimpleX({ x, item }) {\r\n  return (\r\n    <g>\r\n      {\r\n        <g transform={`translate(${x * 20 + 95})`}>\r\n          {item?.map((gate, index) => (\r\n            <SimpleY name={item.name} x={x} key={index} gate={gate} y={index} />\r\n          ))}\r\n        </g>\r\n      }\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default function MeasurGate() {\r\n  return (\r\n    <g>\r\n      <rect x=\"8\" y=\"16\" width={23} height={17} fill=\"#fff\"></rect>\r\n      <path\r\n        d=\"M8, 30A10 10 90 1 1 30 30M19, 30\"\r\n        strokeWidth=\"1\"\r\n        stroke=\"black\"\r\n        fill=\"none\"\r\n      ></path>\r\n      <circle r=\"2.5\" cx=\"19\" cy=\"28\" fill=\"black\"></circle>\r\n      <line\r\n        x1=\"19\"\r\n        y1=\"28\"\r\n        x2=\"28\"\r\n        y2=\"15\"\r\n        strokeWidth=\"1\"\r\n        stroke=\"black\"\r\n      ></line>\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default function SimpleLine({\r\n  index,\r\n  item,\r\n  qubitLineArry,\r\n  delCurcuitLenght,\r\n}) {\r\n  // console.log(item, 88)\r\n  let sum = 0\r\n  for (let i = 0; i < index + 1; i++) {\r\n    sum += delCurcuitLenght[i]\r\n  }\r\n  return (\r\n    <g>\r\n      <g transform={`translate(${sum * 20 - 20 + 20})`}>\r\n        <rect\r\n          fill=\"rgb(215, 215, 215)\"\r\n          width={3}\r\n          height={qubitLineArry.length * 20}\r\n          y=\"30\"\r\n          x=\"100\"\r\n        ></rect>\r\n        <g transform={`translate(${-delCurcuitLenght[index] * 10})`}>\r\n          <text fontSize={12} x={index > 8 ? 94 : 99} y=\"21.5\" fill=\"green\">\r\n            {index + 1}\r\n          </text>\r\n        </g>\r\n        <line\r\n          x1={102}\r\n          x2={102}\r\n          y1={30}\r\n          y2={qubitLineArry.length * 22}\r\n          strokeDasharray=\"4\"\r\n          stroke=\"rgb(45, 45, 45)\"\r\n        ></line>\r\n      </g>\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport SimpleX from \"./SimpleX\"\r\nimport MeasurGate from \"./gates/MeasurGate\"\r\nimport SimpleLine from \"./SimpleLine\"\r\nexport default function SimpleModen({\r\n  circuit,\r\n  qubitLineArry,\r\n  delCircuit1,\r\n  delCurcuitLenght,\r\n}) {\r\n  let svgWidth = delCircuit1.length * 20 + 230\r\n  let svgHeight = qubitLineArry.length * 20 + 230\r\n  return (\r\n    <div style={{ marginLeft: 50 }}>\r\n      <svg\r\n        width={svgWidth}\r\n        height={svgHeight}\r\n        style={{\r\n          backgroundColor: \"#fff\",\r\n        }}\r\n        id=\"circuit\"\r\n      >\r\n        {qubitLineArry.map((qubit, index) => (\r\n          <g\r\n            key={index}\r\n            transform={`translate(60,${20 + index * 20 ? index * 20 : 0})`}\r\n          >\r\n            <g transform=\"translate(-14,4)\">\r\n              <text\r\n                x=\"38.4\"\r\n                y=\"36\"\r\n                dy=\".3em\"\r\n                fill=\"rgb(111, 111, 111)\"\r\n                fontWeight=\"400\"\r\n                textAnchor=\"end\"\r\n                fontSize=\"14px\"\r\n              >\r\n                <tspan>q[{index}]</tspan>\r\n              </text>\r\n            </g>\r\n            <line\r\n              className=\"qubit\"\r\n              strokeWidth=\"1\"\r\n              x1=\"30\"\r\n              y1=\"40\"\r\n              x2={svgWidth - 120}\r\n              y2=\"40\"\r\n              data-dis=\"0\"\r\n              stroke=\"black\"\r\n            ></line>\r\n          </g>\r\n        ))}\r\n        {qubitLineArry.map((item, index) => (\r\n          <g\r\n            transform={`translate(${delCircuit1.length * 20 + 100},${\r\n              20 + index * 20 ? index * 20 + 17 : 0\r\n            })`}\r\n          >\r\n            <MeasurGate />\r\n          </g>\r\n        ))}\r\n        {delCircuit1.map((item, index) => (\r\n          <SimpleX\r\n            qubitLineArry={qubitLineArry}\r\n            key={index}\r\n            x={index}\r\n            item={item}\r\n          />\r\n        ))}\r\n        {delCurcuitLenght.map((item, index) => (\r\n          <SimpleLine\r\n            key={index}\r\n            item={item}\r\n            index={index}\r\n            qubitLineArry={qubitLineArry}\r\n            delCurcuitLenght={delCurcuitLenght}\r\n          />\r\n        ))}\r\n      </svg>\r\n    </div>\r\n  )\r\n}\r\n","export const initCircuit = [\r\n    [\r\n      { name: \"cz\", qubit: [3, 4,5,6,7] },\r\n      { name: \"cz\", qubit: [5, 6] },\r\n      { name: \"i\", qubit: [7] },\r\n      { name: \"pvz\", qubit: [0] },\r\n    ],\r\n    [\r\n      { name: \"cz\", qubit: [0, 1] },\r\n      { name: \"cz\", qubit: [2, 3,4,5] },\r\n      { name: \"i\", qubit: [4] },\r\n      { name: \"i\", qubit: [5] },\r\n      { name: \"cz\", qubit: [6, 7,8,9] },\r\n      { name: \"cz\", qubit: [8,9,10,11,12,13,14,15] },\r\n      { name: \"cz\", qubit: [16, 17] },\r\n      { name: \"cz\", qubit: [9, 14] },\r\n      { name: \"cz\", qubit: [10, 11] },\r\n      { name: \"cz\", qubit: [12, 13] },\r\n    ],\r\n    [\r\n      { name: \"cz\", qubit: [3, 4,5] },\r\n      { name: \"y\", qubit: [7] },\r\n    ],\r\n    [\r\n      { name: \"cz\", qubit: [3, 4] },\r\n      { name: \"pvz\", qubit: [7] },\r\n    ],\r\n    [{ name: \"pvz\", qubit: [1] }],\r\n    [{ name: \"pvz\", qubit: [2] }],\r\n    [{ name: \"pvz\", qubit: [3] }],\r\n    [{ name: \"pvz\", qubit: [4] }],\r\n    [{ name: \"pvz\", qubit: [5] }],\r\n    [{ name: \"pvz\", qubit: [6] }],\r\n    [{ name: \"pvz\", qubit: [7] }],\r\n    [{ name: \"pvz\", qubit: [8] }],\r\n  ]","import React from \"react\"\r\n\r\nexport default function cz({ color }) {\r\n  return (\r\n    <circle\r\n      cx=\"16\"\r\n      cy=\"16\"\r\n      r=\"4\"\r\n      fill={color ? color : \"rgb(126, 164, 248)\"}\r\n    ></circle>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default function I() {\r\n  return (\r\n    <g>\r\n      <rect\r\n        y=\"0\"\r\n        type=\"h\"\r\n        fill=\"rgb(216, 211, 231)\"\r\n        width=\"32\"\r\n        height=\"32\"\r\n      ></rect>\r\n      <text x=\"14.21875\" y=\"21.5\" fill=\"#ffffff\">\r\n        I\r\n      </text>\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default function Pvz() {\r\n  return (\r\n    <g>\r\n      <rect\r\n        y=\"0\"\r\n        type=\"h\"\r\n        fill=\"rgb(226, 106, 84)\"\r\n        width=\"32\"\r\n        height=\"32\"\r\n      ></rect>\r\n      <text x=\"4.21875\" y=\"21.5\" fill=\"#ffffff\">\r\n        PVZ\r\n      </text>\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default function Vz() {\r\n  return (\r\n    <g>\r\n      <rect\r\n        y=\"0\"\r\n        type=\"h\"\r\n        fill=\"rgb(96, 199, 175)\"\r\n        width=\"32\"\r\n        height=\"32\"\r\n      ></rect>\r\n      <text x=\"8.21875\" y=\"21.5\" fill=\"#ffffff\">\r\n        VZ\r\n      </text>\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default function YGate() {\r\n  return (\r\n    <g>\r\n      <rect\r\n        y=\"0\"\r\n        type=\"h\"\r\n        fill=\"rgb(80, 161, 226)\"\r\n        width=\"32\"\r\n        height=\"32\"\r\n      ></rect>\r\n      <text x=\"12.21875\" y=\"21.5\" fill=\"balck\">\r\n        Y\r\n      </text>\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default function OtherGate({ name }) {\r\n  function generateRGB(letter) {\r\n    var charCode = letter.charCodeAt(0)\r\n    var r = (charCode * 43) % 256\r\n    var g = (charCode * 67) % 256\r\n    var b = (charCode * 97) % 256\r\n\r\n    return \"rgb(\" + r + \", \" + g + \", \" + b + \")\"\r\n  }\r\n  let color = generateRGB(name)\r\n  return (\r\n    <g>\r\n      <rect y=\"0\" type=\"h\" fill={color} width=\"32\" height=\"32\"></rect>\r\n      <text\r\n        textAnchor=\"middle\"\r\n        alignmentBaseline=\"middle\"\r\n        width=\"32\"\r\n        height=\"32\"\r\n        x=\"14.21875\"\r\n        y=\"18\"\r\n        fill=\"#ffffff\"\r\n      >\r\n        {name}\r\n      </text>\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport Cz from \"./gates/Cz\"\r\nimport I from \"./gates/I\"\r\nimport Pvz from \"./gates/Pvz\"\r\nimport Vz from \"./gates/Vz\"\r\nimport YGate from \"./gates/YGate\"\r\nimport OtherGate from \"./OtherGate\"\r\nexport default function Y({ gate }) {\r\n  let lineY1 = Math.min(...gate?.qubit)\r\n  let lineY2 = Math.max(...gate?.qubit)\r\n  return (\r\n    <g>\r\n      {gate &&\r\n        gate.qubit?.map((item, index) => (\r\n          <g key={index} transform={`translate(0,${item * 40 + 24})`}>\r\n            {(() => {\r\n              switch (gate.name) {\r\n                case \"cz\":\r\n                  return <Cz />\r\n                case \"i\":\r\n                  return <I />\r\n                case \"pvz\":\r\n                  return <Pvz />\r\n                case \"vz\":\r\n                  return <Vz />\r\n                case \"y\":\r\n                  return <YGate />\r\n\r\n                default:\r\n                  return <OtherGate name={gate?.name} />\r\n              }\r\n            })()}\r\n          </g>\r\n        ))}\r\n      {gate.qubit?.length > 1 && (\r\n        <line\r\n          strokeWidth=\"2\"\r\n          stroke=\"rgb(126, 164, 248)\"\r\n          x1={16}\r\n          x2={16}\r\n          y1={lineY1 * 40 + 40}\r\n          y2={lineY2 * 40 + 40}\r\n        ></line>\r\n      )}\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport Y from \"./Y\"\r\n\r\nexport default function X({ x, item, qubitLineArry }) {\r\n  // let ygate = decompose_gates(item)\r\n  // console.log(ygate, 333)\r\n  return (\r\n    <>\r\n      <g transform={`translate(${x * 45 + 95})`}>\r\n        {/* <g transform={`translate(${x * 30})`}> */}\r\n        {item?.map((gate, index) => (\r\n          <Y name={item.name} x={x} key={index} gate={gate} y={index} />\r\n        ))}\r\n        {/* <rect\r\n          fill=\"rgb(215, 215, 215)\"\r\n          width={5}\r\n          height={qubitLineArry.length * 40}\r\n          y=\"30\"\r\n          x=\"100\"\r\n        ></rect> */}\r\n        {/* <line\r\n          x1={102.5}\r\n          x2={102.5}\r\n          y1={30}\r\n          y2={qubitLineArry.length * 40}\r\n          strokeDasharray=\"4\"\r\n          stroke=\"rgb(45, 45, 45)\"\r\n        ></line> */}\r\n        {/* </g> */}\r\n      </g>\r\n    </>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default function Line({ index, item, qubitLineArry, delCurcuitLenght }) {\r\n  // console.log(item, 88)\r\n  let sum = 0\r\n  for (let i = 0; i < index + 1; i++) {\r\n    sum += delCurcuitLenght[i]\r\n  }\r\n\r\n  return (\r\n    <g transform={`translate(${sum * 45 - 45 + 30})`}>\r\n      <rect\r\n        fill=\"rgb(215, 215, 215)\"\r\n        width={5}\r\n        height={qubitLineArry.length * 40}\r\n        y=\"30\"\r\n        x=\"100\"\r\n      ></rect>\r\n      <g transform={`translate(${-delCurcuitLenght[index] * 20})`}>\r\n        <text fontSize={12} x={index > 8 ? 94 : 99} y=\"21.5\" fill=\"green\">\r\n          {index + 1}\r\n        </text>\r\n      </g>\r\n      <line\r\n        x1={102.5}\r\n        x2={102.5}\r\n        y1={30}\r\n        y2={qubitLineArry.length * 40}\r\n        strokeDasharray=\"4\"\r\n        stroke=\"rgb(45, 45, 45)\"\r\n      ></line>\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport X from \"./X\"\r\nimport Line from \"./Line\"\r\nexport default function NormalMden({\r\n  circuit,\r\n  qubitLineArry,\r\n  delCircuit1,\r\n  delCurcuitLenght,\r\n}) {\r\n  let svgWidth = delCircuit1.length * 50 + 200\r\n  let svgHeight = qubitLineArry.length * 60 + 200\r\n  return (\r\n    <div>\r\n      <svg\r\n        style={{\r\n          backgroundColor: \"#fff\",\r\n        }}\r\n        id=\"delCircuit1\"\r\n        width={svgWidth}\r\n        height={svgHeight}\r\n      >\r\n        {qubitLineArry.map((qubit, index) => (\r\n          <g\r\n            key={index}\r\n            transform={`translate(60,${20 + index * 40 ? index * 40 : 0})`}\r\n          >\r\n            <g transform=\"translate(-14,4)\">\r\n              <text\r\n                x=\"38.4\"\r\n                y=\"36\"\r\n                dy=\".3em\"\r\n                fill=\"rgb(111, 111, 111)\"\r\n                fontWeight=\"400\"\r\n                textAnchor=\"end\"\r\n                fontSize=\"14px\"\r\n              >\r\n                <tspan>q[{index}]</tspan>\r\n              </text>\r\n            </g>\r\n            <line\r\n              className=\"qubit\"\r\n              strokeWidth=\"2\"\r\n              x1=\"30\"\r\n              y1=\"40\"\r\n              x2={svgWidth - 160}\r\n              y2=\"40\"\r\n              data-dis=\"0\"\r\n              stroke=\"black\"\r\n            ></line>\r\n          </g>\r\n        ))}\r\n        {delCircuit1.map((item, index) => (\r\n          <X qubitLineArry={qubitLineArry} key={index} x={index} item={item} />\r\n        ))}\r\n        {delCurcuitLenght.map((item, index) => (\r\n          <Line\r\n            key={index}\r\n            item={item}\r\n            index={index}\r\n            qubitLineArry={qubitLineArry}\r\n            delCurcuitLenght={delCurcuitLenght}\r\n          />\r\n        ))}\r\n      </svg>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useRef, useEffect } from \"react\"\r\nimport { Button, message, Tabs } from \"antd\"\r\nimport downloadSvg from \"svg-crowbar\"\r\nimport { decompose_gates } from \"./decmp\"\r\nimport SimpleModen from \"./SimpleModen\"\r\nimport { initCircuit } from \"./circuit\"\r\nimport NormalMden from \"./NormalMden\"\r\nexport default function Composer() {\r\n  const inputRef = useRef()\r\n  const [circuit, setcircuit] = useState(initCircuit)\r\n  const circuitArray = circuit.map((gates) => [...gates])\r\n  let delCircuit = []\r\n  for (let i = 0; i < circuit.length; i++) {\r\n    delCircuit.push(decompose_gates(circuit[i]))\r\n  }\r\n  let delCurcuitLenght = []\r\n  for (let index = 0; index < delCircuit.length; index++) {\r\n    delCurcuitLenght.push(delCircuit[index].length)\r\n  }\r\n  let delCircuit1 = []\r\n  for (let k = 0; k < delCircuit.length; k++) {\r\n    if (delCircuit[k].length >= 1) {\r\n      for (let j = 0; j < delCircuit[k].length; j++) {\r\n        delCircuit1.push(delCircuit[k][j])\r\n      }\r\n    }\r\n  }\r\n  function findMaxQubit(circuit) {\r\n    return circuit.reduce((max, gates) => {\r\n      const maxQubit = gates.reduce(\r\n        (gatesMax, gate) => Math.max(gatesMax, ...(gate.qubit || [])),\r\n        0\r\n      )\r\n      return Math.max(maxQubit, max)\r\n    }, 0)\r\n  }\r\n  const maxqubit = findMaxQubit(circuitArray)\r\n\r\n  let qubitLineArry = []\r\n  for (let index = 0; index <= maxqubit; index++) {\r\n    qubitLineArry.push(index)\r\n  }\r\n  const width =\r\n    circuit.length * 150 + 300 > 1000 ? circuit.length * 150 + 300 : 1000\r\n  // eslint-disable-next-line no-unused-expressions\r\n  circuit.length * 150 + 300 > 1000 ? circuit.length * 150 + 300 : 1000\r\n  // eslint-disable-next-line no-unused-expressions\r\n  circuit.length * 150 + 300 > 1000 ? circuit.length * 150 + 300 : 1000\r\n  const svgHeight =\r\n    qubitLineArry.length * 40 + 300 > 600\r\n      ? qubitLineArry.length * 40 + 300\r\n      : 600\r\n  // 导入数据\r\n  const [jsonData, setJsonData] = useState(null)\r\n  const onClick = () => {\r\n    inputRef.current.click()\r\n  }\r\n  const handleFileUpload = (event) => {\r\n    const reader = new FileReader()\r\n    reader.onload = () => {\r\n      try {\r\n        const result = JSON.parse(reader.result)\r\n        setJsonData(result)\r\n\r\n        // 将解析得到的 JSON 对象存入状态中\r\n      } catch (error) {\r\n        message.error(error)\r\n      }\r\n    }\r\n    reader.readAsText(event.target.files[0])\r\n  }\r\n  useEffect(() => {\r\n    if (jsonData?.length) {\r\n      setcircuit(jsonData)\r\n    }\r\n  }, [jsonData])\r\n  const exportSvg = () => {\r\n    downloadSvg(document.getElementById(\"circuit\"))\r\n  }\r\n  const exportJosn = () => {\r\n    const jsonData = JSON.stringify(circuit)\r\n\r\n    const blob = new Blob([jsonData], { type: \"application/json\" })\r\n\r\n    const url = URL.createObjectURL(blob)\r\n\r\n    const link = document.createElement(\"a\")\r\n    link.href = url\r\n    link.download = \"circuit.json\"\r\n    link.click()\r\n  }\r\n\r\n  const items = [\r\n    {\r\n      key: \"1\",\r\n      label: `Normal`,\r\n      children: (\r\n        <NormalMden\r\n          delCircuit1={delCircuit1}\r\n          qubitLineArry={qubitLineArry}\r\n          circuit={circuit}\r\n          delCurcuitLenght={delCurcuitLenght}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      key: \"2\",\r\n      label: `Simple`,\r\n      children: (\r\n        <SimpleModen\r\n          delCircuit1={delCircuit1}\r\n          qubitLineArry={qubitLineArry}\r\n          circuit={circuit}\r\n          delCurcuitLenght={delCurcuitLenght}\r\n        />\r\n      ),\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <div\r\n      style={{ background: \"#fff\", overflowX: \"scroll\", overflowY: \"scroll\" }}\r\n    >\r\n      <div\r\n        style={{\r\n          marginTop: 20,\r\n          marginLeft: 20,\r\n        }}\r\n        className=\"uploding\"\r\n      >\r\n        <input\r\n          ref={inputRef}\r\n          style={{ display: \"none\" }}\r\n          onChange={handleFileUpload}\r\n          type=\"file\"\r\n          accept=\".json\"\r\n        ></input>\r\n        <Button\r\n          onClick={onClick}\r\n          style={{\r\n            marginTop: 20,\r\n          }}\r\n        >\r\n          导入数据(json)\r\n        </Button>\r\n\r\n        <Button\r\n          onClick={exportSvg}\r\n          style={{\r\n            marginTop: 20,\r\n            marginLeft: 10,\r\n          }}\r\n        >\r\n          导出图片\r\n        </Button>\r\n        <Button\r\n          onClick={exportJosn}\r\n          style={{\r\n            marginTop: 20,\r\n            marginLeft: 10,\r\n          }}\r\n        >\r\n          导出数据(json)\r\n        </Button>\r\n      </div>\r\n      <div\r\n        style={{\r\n          background: \"#fff\",\r\n          width: width,\r\n          height: svgHeight,\r\n          marginTop: 50,\r\n          marginLeft: 50,\r\n        }}\r\n        className=\"svgConten\"\r\n      >\r\n        <Tabs defaultActiveKey=\"1\" items={items} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"names":["copy","element","JSON","parse","stringify","decompose_gates","gates","ql","qr","result","tmp","left","right","length","new_gates","i","sort","a","b","push","Math","min","max","m1","m2","SimpleGate","_ref","color","_jsx","cx","cy","r","fill","stroke","strokeWidth","SimpleY","_gate$qubit","_gate$qubit2","gate","lineY1","apply","_toConsumableArray","qubit","lineY2","_jsxs","children","x1","x2","y1","y2","map","item","index","transform","concat","SimpleX","x","name","y","MeasurGate","width","height","d","SimpleLine","qubitLineArry","delCurcuitLenght","sum","fontSize","strokeDasharray","SimpleModen","circuit","delCircuit1","svgWidth","svgHeight","style","marginLeft","backgroundColor","id","dy","fontWeight","textAnchor","className","initCircuit","cz","I","type","Pvz","Vz","YGate","OtherGate","letter","charCode","charCodeAt","generateRGB","alignmentBaseline","Y","Cz","X","_Fragment","Line","NormalMden","Composer","inputRef","useRef","_useState","useState","_useState2","_slicedToArray","setcircuit","circuitArray","delCircuit","k","j","maxqubit","reduce","maxQubit","gatesMax","findMaxQubit","_useState3","_useState4","jsonData","setJsonData","useEffect","items","key","label","background","overflowX","overflowY","marginTop","ref","display","onChange","event","reader","FileReader","onload","error","message","readAsText","target","files","accept","Button","onClick","current","click","downloadSvg","document","getElementById","blob","Blob","url","URL","createObjectURL","link","createElement","href","download","Tabs","defaultActiveKey"],"sourceRoot":""}